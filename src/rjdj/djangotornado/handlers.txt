##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of django-tornado.
#
# Django-tornado is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# django-tornado is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with django-tornado. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################


==============================================================================
  $ TESTS FOR DJANGOTORNADO PACKAGE
  $ rjdj.djangotornado.handlers.py
==============================================================================

    >>> from pprint import pprint

First create a fake settings module. We need that for the default
POST/GET data encoding.

    >>> class SettingsModule(dict):
    ...
    ...     def __init__(self,f):
    ...         self.__file__ = f
    ...
    ...     __all__ = []

    >>> settings = SettingsModule(__file__)
    >>> settings["DEFAULT_CHARSET"] = "utf-8"

Set up Django environment with the fake settings module:

    >>> from django.core.management import setup_environ
    >>> res = setup_environ(settings)


In order to use Django views with ansyncronous Tornado we need to
provide an adaptor that converts a Tornado request into a Django
request as good as possible.
    >>> from rjdj.djangotornado.handlers import DjangoRequest
    >>> from tornado.httpserver import HTTPRequest

    >>> adaptor = DjangoRequest()
    Traceback (most recent call last):
    ...
       adaptor = DjangoRequest()
    TypeError: __init__() takes at least 2 arguments (1 given)


    >>> tornado_req = HTTPRequest('DELETE',u'/')
    >>> adaptor = DjangoRequest(tornado_req)
    Traceback (most recent call last):
    ...
    ValueError: Method must be GET or POST

    >>> tornado_req.method = "GET"
    >>> adaptor = DjangoRequest(tornado_req)
    >>> adaptor
    <HttpRequest
    GET:<QueryDict: {}>,
    POST:<QueryDict: {}>,
    COOKIES:{},
    META:{'HTTP_HOST': '127.0.0.1',
     'PROTOCOL': 'http',
     'REMOTE_ADDR': None,
     'SERVER_NAME': '127.0.0.1'}>

    >>> adaptor.build_absolute_uri()
    u'http://127.0.0.1/'

    >>> adaptor["HTTP_HOST"] = "example.com"
    >>> adaptor.build_absolute_uri(u'/test')
    u'http://example.com/test'


    >>> tornado_req = HTTPRequest('GET',u'/testhandler?key=value')
    >>> adaptor = DjangoRequest(tornado_req)
    >>> adaptor.GET
    <QueryDict: {u'key': [u'value']}>
    >>> adaptor.POST
    <QueryDict: {}>

    >>> tornado_req = HTTPRequest('POST',
    ...                           u'/testhandler',
    ...                           body='data=some_b64_string&signature=some_hmac_sig&key=1&key=2&key=3')
    >>> adaptor = DjangoRequest(tornado_req)
    >>> adaptor.GET
    <QueryDict: {}>
    >>> adaptor.POST
    <QueryDict: {u'data': [u'some_b64_string'], u'key': [u'1', u'2', u'3'], u'signature': [u'some_hmac_sig']}>


    >>> tornado_req = HTTPRequest('GET',u'/')
    >>> adaptor = DjangoRequest(tornado_req)
    >>> adaptor.COOKIES
    {}

    >>> from tornado.httputil import HTTPHeaders
    >>> headers = HTTPHeaders()
    >>> headers.add('Cookie', u'session_id=6f5902ac237024bdd0c176cb93063dc4')

    >>> tornado_req = HTTPRequest('GET',u'/',headers=headers)
    >>> adaptor = DjangoRequest(tornado_req)
    >>> adaptor.COOKIES
    {'session_id': '6f5902ac237024bdd0c176cb93063dc4'}


    >>> import Cookie
    >>> cookies = Cookie.BaseCookie()
    >>> cookies.load({"session_id":"6f5902ac237024bdd0c176cb93063dc4",
    ...               "name":"value"})
    >>> cookies
    <BaseCookie: name='value' session_id='6f5902ac237024bdd0c176cb93063dc4'>

    >>> tornado_req = HTTPRequest('GET',u'/')
    >>> adaptor = DjangoRequest(tornado_req, cookies)
    >>> adaptor.COOKIES
    {'name': 'value', 'session_id': '6f5902ac237024bdd0c176cb93063dc4'}
