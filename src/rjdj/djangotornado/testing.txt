##############################################################################
#
# Copyright (c) 2011 Reality Jockey Ltd. and Contributors.
# This file is part of django-tornado.
#
# Django-tornado is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Django-tornado is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with django-tornado. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

==============================================================================
  $ TESTS FOR DJANGOTORNADO PACKAGE
  $ rjdj.djangotornado.testing.py
==============================================================================

    >>> from pprint import pprint
    >>> from rjdj.djangotornado.testing import TestServer, TestClient
    >>> from rjdj.djangotornado.signals import tornado_exit
    >>> from tornado.web import RequestHandler
    >>> from rjdj.djangotornado.handlers import SynchronousDjangoHandler

First create a set up Django. We need that for the default
sending/receiving Django signals.
    
    >>> from django.conf import settings
    >>> settings.configure(DEBUG=True, 
    ...                    ROOT_URLCONF = "fake_djangotornado_urls")
       
A test server runs it's IOLoop in the background to keep the test
thread as the main thread and enable printing.

The TestServer class is a subclass of Tornado's HTTPServer and
requires at least a set of handlers (URLs) and an optional IOLoop instance:

    >>> server = TestServer()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes at least 2 arguments (1 given)

So let's create a TestServer instance with an empty handler set.

    >>> handlers = ()
    >>> server = TestServer(handlers)

The TestServer instance is not started automatically.

    >>> server._started
    False

The test server uses the global IOLoop instance.

    >>> server.io_loop
    <tornado.ioloop.IOLoop object at 0x...>

    >>> server.io_loop.running()
    False

So let's try to start the testserver.

    >>> server.start()
    Traceback (most recent call last):
    ...
    Exception: You are not allowed ...
    Use 'testserver.run()' instead!

Ok, we are not allowed to start the testserver instance in the same
thread as the test.
    >>> server.run()

We can see that the server spawns a new thread.

    >>> print server._io_thread
    <Thread(Thread-1, started daemon ...)>

We should not quit the thread from outside, but instead shut down the
server or delete it from memory.

    >>> server._stop()
    >>> print server._io_thread
    None

    >>> server.run()
    >>> print server._io_thread
    <Thread(Thread-2, started daemon ...)>

    >>> server.port
    10000

You can spawn only one testserver at a time.

    >>> temp_server = TestServer(())
    >>> temp_server.run()
    Traceback (most recent call last):
    ...
    error: [Errno ...] Address already in use


    >>> del temp_server


If we want to update the url configuration we can run the update_app command.

    >>> class TestHandler(RequestHandler):
    ...     def get(self):
    ...         self.write("Hello World!")
    ...         self.finish()

    >>> handlers = (
    ...     (r"/", TestHandler),
    ...     )
    >>> server.update_app(handlers)

Try it out!

    >>> url = "http://localhost:%d/" % server.port
    >>> import urllib2
    >>> res = urllib2.urlopen(url)
    >>> res.read()
    'Hello World!'

Great!

Stop the test server and try again. We expect the server to refuse the connection and send a Django signal after stopping.
    
    >>> def on_tornado_exit(sender, **kwargs):
    ...     print "Tornado exited"
    
    >>> tornado_exit.connect(on_tornado_exit)
    >>> server._stop()
    Tornado exited
    
Disconnect the signal again, to avoid interruptions:
    >>> tornado_exit.disconnect(on_tornado_exit)

    >>> res = urllib2.urlopen(url)
    Traceback (most recent call last):
    ...
    URLError: <urlopen error [Errno ...] Connection refused>


Last but not least clean up ...

    >>> del server
    Kill IOLoop thread: None 
    Kill current thread: <_MainThread(MainThread, started ...)>
    Kill IOLoop thread: None 
    Kill current thread: <_MainThread(MainThread, started ...)>

Done.

Now let's go on to the TestClient class. Within tests only this class
is used, and the test server is spawned by the testclient.

    >>> client = TestClient()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes at least 2 arguments (1 given)

    >>> client = TestClient(())

The client creates a URL which with it connects to the test server instance.

    >>> client.get_url("/")
    'http://localhost:10000/'

We can specify a protocol as well.

    >>> client.get_url("/", "https")
    'https://localhost:10000/'

The test client does not care about the protocol as long as it is a string:

    >>> client.get_url("/", u"my-protocol")
    'my-protocol://localhost:10000/'

    >>> client.get_url("/", 123)
    Traceback (most recent call last):
    ...
    TypeError: Protocol must be string or unicode.


We need to provide a set of handlers that are passed to the server instance.

    >>> class TestHandler(RequestHandler):
    ...
    ...     def post(self):
    ...         self.write("URL: %s\n" % self.request.uri)
    ...         self.write("Method: POST\n")
    ...         self.write(str(self.request))
    ...         self.finish()
    ...
    ...     def get(self):
    ...         self.write("URL: %s\n" % self.request.uri)
    ...         self.write("Method: GET\n")
    ...         self.write(str(self.request))
    ...         self.finish()
    ...
    ...     def put(self):
    ...         self.write("Method: PUT\n")
    ...         self.finish()
    ...
    ...     def delete(self):
    ...         self.write("Method: DELETE\n")
    ...         self.finish()
    ...
    >>> class BrokenTestHandler(RequestHandler):
    ...
    ...     def get(self):
    ...         """We want to provoke a 500 page :)"""
    ...         eval("5 = self")
    ...         self.write(str(self.request))
    ...         self.finish()

    >>> handlers = (
    ...     (r"/", TestHandler),
    ...     (r"/broken", BrokenTestHandler),
    ...     )

Let's test them one by one!

    >>> client = TestClient(handlers)
    >>> client
    <rjdj.djangotornado.testing.TestClient object at 0x...>

    >>> res = client.get("/")

The representation of the test response is the raw server response:

    >>> res
    Content-length: 266
    Etag: "..."
    Content-type: text/html; charset=UTF-8
    Server: TornadoServer/...
    URL: /
    Method: GET
    HTTPRequest(...)

We also have a status_code attribute:

    >>> res.status_code
    200

And a content attribute:

    >>> print res.content
    URL: /
    Method: GET
    HTTPRequest(...)

As well as a _headers attribute:

    >>> print res._headers
    [('content-length', '266'),
     ('content-type', 'text/html; charset=UTF-8'),
     ('etag', '"..."'),
     ('server', 'TornadoServer/...')]


So take a look at the POST.
Everything should be the same as before:

    >>> res = client.post("/")
    >>> res.status_code
    200
    >>> print res.content
    URL: /
    Method: POST
    HTTPRequest(...)


So what happens when we look up a URL that does not exist?

    >>> res = client.get("/a-uri-that-does-not-exist")
    >>> res.status_code
    404
    >>> res
    Content-length: 69
    Content-type: text/html; charset=UTF-8
    Server: TornadoServer/...
    <html><title>404: Not Found</title><body>404: Not Found</body></html>

Very nice: 404
That's what we want ...
But what about the 500's?

    >>> res = client.get("/broken")
    >>> res.status_code
    500
    >>> res
    Content-length: 93
    Content-type: text/html; charset=UTF-8
    Server: TornadoServer/...
    <html><title>500: Internal Server Error</title><body>500: Internal Server Error</body></html>


Tornado also handles PUT and DELETE methods, but the test client does
not yet :(

    >>> client.put("/")
    Traceback (most recent call last):
    ...
    NotImplementedError

    >>> client.delete("/")
    Traceback (most recent call last):
    ...
    NotImplementedError



By now POST and GET parameters have not been tested.
So purge the current client and create a new one with new url handlers.

    >>> del client

    >>> class ParameterHandler(RequestHandler):
    ...
    ...     def output(self,request):
    ...         self.write("Method: %s\n" % request.method)
    ...         self.write("Query: %s\n" % request.query)
    ...         self.write("Body: %s\n" % request.body)
    ...         self.write("Arguments: %s\n" % request.arguments)
    ...         if request.files:
    ...             self.write("Files: %s\n" % request.files)
    ...
    ...     def post(self):
    ...         self.output(self.request)
    ...         self.finish()
    ...
    ...     def get(self):
    ...         self.output(self.request)
    ...         self.finish()

    >>> class URLParameterHandler(RequestHandler):
    ...
    ...     def get(self, digit, string):
    ...         self.write("First argument: %s (%s)\n" % (str(digit),type(digit)))
    ...         self.write("Second argument: %s (%s)\n" % (str(string),type(string)))
    ...         self.finish()

    >>> def django_handler(request):
    ...     print request.POST
    ...     print request.FILES

    >>> handlers = (
    ...     (r"/", ParameterHandler),
    ...     (r"/foo/(\d+)/([^/]+)", URLParameterHandler),
    ...     (r"/django", SynchronousDjangoHandler, dict(django_view = django_handler )),
    ...     )
    >>> client = TestClient(handlers)

You can add a dict to the GET method that represents the arguments.

    >>> res = client.get("/",{"foo":"bar"})
    >>> print res.content
    Method: GET
    Query: foo=bar
    Body:
    Arguments: {'foo': ['bar']}

    >>> res = client.get("/",{"foo":"bar","array":[1,2]})
    >>> print res.content
    Method: GET
    Query: array=%5B1%2C+2%5D&foo=bar
    Body: 
    Arguments: {'array': ['[1, 2]'], 'foo': ['bar']}

Use the same pattern with POST requests:

    >>> res = client.post("/",{"foo":"bar"})
    >>> print res.content
    Method: POST
    Query:
    Body: foo=bar
    Arguments: {'foo': ['bar']}

    >>> res = client.post("/",{"foo":"bar","array":[1,2]})
    >>> print res.content
    Method: POST
    Query:
    Body: array=%5B1%2C+2%5D&foo=bar
    Arguments: {'array': ['[1, 2]'], 'foo': ['bar']}

Let's try a URL that requires arguments within the url!

    >>> res = client.get("/foo/x/y")
    >>> res
    Content-length: 69
    Content-type: text/html; charset=UTF-8
    Server: TornadoServer/...
    <html><title>404: Not Found</title><body>404: Not Found</body></html>

Ooops, that url returns a 404. Use the required digit ...
Parameters are passed as unicode characters:

    >>> res = client.get("/foo/1/y")
    >>> print res.content
    First argument: 1 (<type '...'>)
    Second argument: y (<type '...'>)

Moreover the TestClient also supports file uploads by simply passing either 
the filepointer or the file's content within a dictionary to the post() method.
Be aware that the test client does not (yet?) support for UTF-8 or binary encoded
files (like images):

    >>> import tempfile
    >>> temp_file = tempfile.TemporaryFile()
    >>> temp_file.write("Hello World")
    >>> temp_file.seek(0)
    >>> res = client.post("/", {"key": "value"}, files = { "myfile": temp_file })
    >>> "myfile" in res.content and \
    ... "Hello World" in res.content and \
    ... "text/plain" in res.content and \
    ... "filename" in res.content
    True
    
This was a Tornado Request, now for some Django-style Request:
    >>> temp_file.seek(0)
    >>> res = client.post("/django", {"key": "value"}, files = { "myfile": temp_file })
    <QueryDict: {u'key': [u'value']}>
    <MultiValueDict: {u'myfile': [<InMemoryUploadedFile: <fdopen> (text/plain)>]}>

Well, that works :)

Purge the test client and go on ...

    >>> del client
    Kill IOLoop thread: None 
    Kill current thread: <_MainThread(MainThread, started ...)>
    Kill IOLoop thread: None 
    Kill current thread: <_MainThread(MainThread, started ...)>


Last but not least: Let's take a look at the low level classes::

    >>> from rjdj.djangotornado.testing import TestResponse
    >>> res = TestResponse()
    >>> res.status_code
    200

    >>> res = TestResponse(status_code=404)
    >>> res.status_code
    404

    >>> res.content
    ''

    >>> res = TestResponse(content="response content")
    >>> res.content
    'response content'

The representation of the TestRespose class is the raw response
containing headers and content (such as a web browser receives the reponse):

    >>> res = TestResponse(status_code=404,
    ...                    content="404 Not Found",
    ...                    headers={"Content-Type":"text/html; encoding=utf-8",
    ...                             "Etag":"HexValue"})
    >>> res
    Etag: HexValue
    Content-type: text/html; encoding=utf-8
    404 Not Found

    >>> res.raw_response()
    'Etag: HexValue\nContent-type: text/html; encoding=utf-8\n404 Not Found'


    >>> from rjdj.djangotornado.testing import TestResponseHeaders

    >>> headers = TestResponseHeaders()
    Traceback (most recent call last):
    ...
    TypeError: __init__() takes exactly 2 arguments (1 given)

The class requires a simple dict. It may even be empty!

    >>> headers = TestResponseHeaders({"Content-Type":"text/plain; encoding=utf-8"})
    Kill IOLoop thread: None 
    Kill current thread: <_MainThread(MainThread, started ...)>
    Kill IOLoop thread: None 
    Kill current thread: <_MainThread(MainThread, started ...)>

    >>> headers
    [('Content-Type', 'text/plain; encoding=utf-8')]

    >>> headers['Content-Type']
    'text/plain; encoding=utf-8'

    >>> headers['Set-Cookie'] = "cookie_name=cookie_value;"
    Traceback (most recent call last):
    ...
    AttributeError: You are not allowed to set headers once they are defined.

